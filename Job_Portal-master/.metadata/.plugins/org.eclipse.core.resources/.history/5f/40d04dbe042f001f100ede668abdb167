package com.authservice.proxyentity.user;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.userservice.constant.RecruiterConstants;
import com.userservice.exception.RecruiterNotFoundException;
import com.userservice.model.Recruiter;
import com.userservice.service.RecruiterService;

@RestController
@RequestMapping(RecruiterConstants.RECRUITERS_BASE_PATH)
public class RecruiterController {

    @Autowired
    private RecruiterService recruiterService;

    @PostMapping(RecruiterConstants.ADD)
    public ResponseEntity<Recruiter> addRecruiter(@RequestBody Recruiter recruiter) {
        Recruiter addedRecruiter = recruiterService.addRecruiter(recruiter);
        return new ResponseEntity<>(addedRecruiter, RecruiterConstants.HTTP_STATUS_CREATED);
    }

    @GetMapping(RecruiterConstants.GET_ALL)
    public ResponseEntity<List<Recruiter>> getAllRecruiters() throws RecruiterNotFoundException {
        List<Recruiter> allRecruiters = recruiterService.getAllRecruiters();
        return new ResponseEntity<>(allRecruiters, RecruiterConstants.HTTP_STATUS_OK);
    }

    @GetMapping(RecruiterConstants.GET_BY_ID)
    public ResponseEntity<Recruiter> getRecruiterById(@PathVariable long id) throws RecruiterNotFoundException {
        Recruiter recruiter = recruiterService.getRecruiterById(id);
        return new ResponseEntity<>(recruiter, RecruiterConstants.HTTP_STATUS_OK);
    }

    @PutMapping(RecruiterConstants.UPDATE)
    public ResponseEntity<Recruiter> updateRecruiter(@RequestBody Recruiter recruiter)
            throws RecruiterNotFoundException {
        Recruiter updatedRecruiter = recruiterService.updateRecruiter(recruiter);
        return new ResponseEntity<>(updatedRecruiter, RecruiterConstants.HTTP_STATUS_OK);
    }

    @DeleteMapping(RecruiterConstants.DELETE)
    public ResponseEntity<String> deleteRecruiter(@PathVariable long id) throws RecruiterNotFoundException {
        String deleteRecruiter = recruiterService.deleteRecruiter(id);
        return new ResponseEntity<>(deleteRecruiter, RecruiterConstants.HTTP_STATUS_OK);
    }
}
