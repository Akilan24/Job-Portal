package com.userservice.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.userservice.model.Recruiter;
import com.userservice.repository.RecruiterRepository;

@Service
public class RecruiterServiceImpl implements RecruiterService {

    @Autowired
    private RecruiterRepository recruiterRepository;

    @Override
    public Recruiter addRecruiter(Recruiter recruiter) {
        return recruiterRepository.save(recruiter);
    }

    @Override
    public List<Recruiter> getAllRecruiters() {
        return recruiterRepository.findAll();
    }

    @Override
    public Recruiter getRecruiterById(long id) {
        return recruiterRepository.findById(id).orElseThrow(() -> new RuntimeException("Recruiter not found with id " + id));
    }

    @Override
    public Recruiter updateRecruiter(Recruiter recruiter) {
        Optional<Recruiter> existingRecruiter = recruiterRepository.findById(recruiter.getId());
        if (existingRecruiter.isPresent()) {
            Recruiter updatedRecruiter = existingRecruiter.get();
            updatedRecruiter.setFirstName(recruiter.getFirstName());
            updatedRecruiter.setLastName(recruiter.getLastName());
            updatedRecruiter.setEmailId(recruiter.getEmailId());
            updatedRecruiter.setCompany(recruiter.getCompany());
            updatedRecruiter.setCity(recruiter.getCity());
            updatedRecruiter.setState(recruiter.getState());
            updatedRecruiter.setCountry(recruiter.getCountry());
            updatedRecruiter.setPincode(recruiter.getPincode());
            updatedRecruiter.setLogo(recruiter.getLogo());
            return recruiterRepository.save(updatedRecruiter);
        } else {
            throw new RuntimeException("Recruiter not found with id " + recruiter.getId());
        }
    }

    @Override
    public void deleteRecruiter(long id) {
        if (recruiterRepository.existsById(id)) {
            recruiterRepository.deleteById(id);
        } else {
            throw new RuntimeException("Recruiter not found with id " + id);
        }
    }
}
