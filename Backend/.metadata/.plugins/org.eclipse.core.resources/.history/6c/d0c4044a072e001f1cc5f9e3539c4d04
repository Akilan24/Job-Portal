package com.authservice.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.userservice.exception.ApplicantNotFoundException;
import com.userservice.model.Applicant;
import com.userservice.service.ApplicantService;

@RestController
@RequestMapping("/user/applicants")
public class ApplicantController {

	@Autowired
	private ApplicantService applicantService;

	@PostMapping("/add")
	public ResponseEntity<Applicant> addApplicant(@RequestBody Applicant applicant) {
		Applicant addedApplicant = applicantService.addApplicant(applicant);
		return new ResponseEntity<>(addedApplicant, HttpStatus.CREATED);
	}

	@GetMapping("/getall")
	public ResponseEntity<List<Applicant>> getAllApplicants() throws ApplicantNotFoundException {
		List<Applicant> allApplicants = applicantService.getAllApplicants();
		return new ResponseEntity<>(allApplicants, HttpStatus.OK);
	}

	@GetMapping("/get/{id}")
	public ResponseEntity<Applicant> getApplicantById(@PathVariable long id) throws ApplicantNotFoundException {
		Applicant applicant = applicantService.getApplicantById(id);
		return new ResponseEntity<>(applicant, HttpStatus.OK);
	}

	@PutMapping("/update")
	public ResponseEntity<Applicant> updateApplicant(@RequestBody Applicant applicant)
			throws ApplicantNotFoundException {
		Applicant updatedApplicant = applicantService.updateApplicant(applicant);
		return new ResponseEntity<>(updatedApplicant, HttpStatus.OK);
	}

	@DeleteMapping("/delete/{id}")
	public ResponseEntity<String> deleteApplicant(@PathVariable long id) throws ApplicantNotFoundException {
		String deleteApplicant = applicantService.deleteApplicant(id);
		return new ResponseEntity<>(deleteApplicant, HttpStatus.OK);
	}
}
